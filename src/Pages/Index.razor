@page "/"
@page "/hello"
@inject HttpClient Http

@using Wanderer.Systems.Validation
@using System.IO.Compression
@using Wanderer.Editor
@using Wanderer.Actions
@using System.Threading;

<h1>Dialogue Builder</h1>

Enter your dialogue tree here using space key for indentation.  Alternate dialogue text with responses for example:

<textarea @bind="@Input" style="width: 100%; height:300px; font-family:monospace; font-size:small"></textarea>

<button class="btn btn-primary" @onclick="BuildDialogue">Build</button>

<textarea @bind="@Output" style="width:100%; height:300px; font-family:monospace; font-size:small"></textarea>


<h2>Example Game</h2>

<textarea @bind="@Console" style="width: 100%; height:300px; font-family:monospace; font-size:small; background-color: black; color: white" readonly></textarea>

<input  @onkeypress="KeyHandler" @bind="@ConsoleInput"/> 
<button class="btn btn-primary" @onclick="Enter">Enter</button>


@code {

    private const string Example =
        @"
Morning player, how are you this fine morning?
  Good, What about you Npc, how are you?
      I'm feeling homicidal... just looking for some monsters to fight really
        I know where some monsters are
        Have you thought about therapy?
  Bad
    Sorry to hear that
  Indifferent
    Yeah me too, no energy to do anything on days like this";

    private string Input { get; set; } = Example.Trim();

    private string Output { get; set; }
    
    public void BuildDialogue()
    {
        try
        {

            var db = new DialogueBuilder();
            Output = db.BuildAndSerialize(Input);
        }
        catch (Exception)
        {
            Output = "Error";
        }
    }

    private string Console {get;set;} = "Type 'Start' to start\n";

    private string ConsoleInput {get;set;}

    private byte[] zip;

    private Wanderer.IWorld world;
    private AsyncUserInterface ui = new AsyncUserInterface();

    protected override async Task OnInitializedAsync()
    {
        zip = await Http.GetByteArrayAsync("Resources.zip");    
    }
    private void KeyHandler(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
          Enter();
        }
    }
    public void Enter()
    {
      if(ui.ShowMessageDelegate == null)
        ui.ShowMessageDelegate = (m)=>
        {        
            Console += m + Environment.NewLine;
        };

      try
      {

        if(int.TryParse(ConsoleInput, out int choice))
        {
           if(actions.ContainsKey(choice))
              RunAction(actions[choice]);
           else
             Console += "Invalid choice" + Environment.NewLine;
        }

        if(string.Equals(ConsoleInput,"start",StringComparison.CurrentCultureIgnoreCase))
        {
            Console += "Loading " + zip.Length + " bytes" + Environment.NewLine;
            
            using (ZipArchive archive = new ZipArchive(new System.IO.MemoryStream(zip), ZipArchiveMode.Read))
            {
              Console += "Found " + archive.Entries.Count + " files" + Environment.NewLine;

              var factory = new ZipWorldFactory(archive);

              var validator = new WorldValidator();

              Console += "Validating World" + Environment.NewLine;

              validator.Validate(factory);

              Console += validator.Warnings + Environment.NewLine;
              Console += validator.Errors + Environment.NewLine;

              Console += validator.WarningCount + " Warnings" + Environment.NewLine;           
              Console += validator.ErrorCount + " Errors" + Environment.NewLine;

              world = factory.Create();

              PromptCommands();
            }
        }
      }
      catch(Exception ex)
      {
        Console += ex + Environment.NewLine;
      }

      ConsoleInput = "";
    }

    Dictionary<int,IAction> actions = new Dictionary<int, IAction>();

    public void PromptCommands()
    {
      if(world == null)
        return;
      
      actions.Clear();

      int i=0;
      foreach(IAction a in world.Player.GetFinalActions())
      {
          i++;
          Console += i + ":" + a + Environment.NewLine;
          actions.Add(i,a);
      }
    }

    public void RunAction(IAction a)
    {
      Console = "";

      if(world != null)
      {

        Task round = new Task(()=>
        {
          world.RunRound(ui,a);

          PromptCommands();
        });

        round.Start();
      }
    }
}